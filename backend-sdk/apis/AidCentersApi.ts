/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AidCenter,
} from '../models';

export interface CreateAidCenterRequest {
    aidCenter?: AidCenter;
}

export interface DestroyAidCenterRequest {
    slug: string;
}

export interface PartialUpdateAidCenterRequest {
    slug: string;
    aidCenter?: AidCenter;
}

export interface RetrieveAidCenterRequest {
    slug: string;
}

export interface UpdateAidCenterRequest {
    slug: string;
    aidCenter?: AidCenter;
}

/**
 * 
 */
export class AidCentersApi extends runtime.BaseAPI {

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async createAidCenterRaw(requestParameters: CreateAidCenterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AidCenter>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/aid-centers/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.aidCenter,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async createAidCenter(aidCenter?: AidCenter, initOverrides?: RequestInit): Promise<AidCenter> {
        const response = await this.createAidCenterRaw({ aidCenter: aidCenter }, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async destroyAidCenterRaw(requestParameters: DestroyAidCenterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling destroyAidCenter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aid-centers/{slug}/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async destroyAidCenter(slug: string, initOverrides?: RequestInit): Promise<void> {
        await this.destroyAidCenterRaw({ slug: slug }, initOverrides);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async listAidCentersRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<AidCenter>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aid-centers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async listAidCenters(initOverrides?: RequestInit): Promise<Array<AidCenter>> {
        const response = await this.listAidCentersRaw(initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async partialUpdateAidCenterRaw(requestParameters: PartialUpdateAidCenterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AidCenter>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling partialUpdateAidCenter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/aid-centers/{slug}/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.aidCenter,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async partialUpdateAidCenter(slug: string, aidCenter?: AidCenter, initOverrides?: RequestInit): Promise<AidCenter> {
        const response = await this.partialUpdateAidCenterRaw({ slug: slug, aidCenter: aidCenter }, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async retrieveAidCenterRaw(requestParameters: RetrieveAidCenterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AidCenter>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling retrieveAidCenter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/aid-centers/{slug}/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async retrieveAidCenter(slug: string, initOverrides?: RequestInit): Promise<AidCenter> {
        const response = await this.retrieveAidCenterRaw({ slug: slug }, initOverrides);
        return await response.value();
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async updateAidCenterRaw(requestParameters: UpdateAidCenterRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<AidCenter>> {
        if (requestParameters.slug === null || requestParameters.slug === undefined) {
            throw new runtime.RequiredError('slug','Required parameter requestParameters.slug was null or undefined when calling updateAidCenter.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/aid-centers/{slug}/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.aidCenter,
        }, initOverrides);

        return new runtime.JSONApiResponse(response);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     */
    async updateAidCenter(slug: string, aidCenter?: AidCenter, initOverrides?: RequestInit): Promise<AidCenter> {
        const response = await this.updateAidCenterRaw({ slug: slug, aidCenter: aidCenter }, initOverrides);
        return await response.value();
    }

}
