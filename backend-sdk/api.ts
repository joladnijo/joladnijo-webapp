/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * 
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as url from "url";
import * as isomorphicFetch from "isomorphic-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "/".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = isomorphicFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AidCenter
 */
export interface AidCenter {
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    id?: string;
    /**
     * 
     * @type {AidCenterOrganization}
     * @memberof AidCenter
     */
    organization: AidCenterOrganization;
    /**
     * 
     * @type {AidCenterOrganizationContact}
     * @memberof AidCenter
     */
    contact: AidCenterOrganizationContact;
    /**
     * 
     * @type {any}
     * @memberof AidCenter
     */
    geoLocation: any;
    /**
     * 
     * @type {Array<AidCenterAssetsRequested>}
     * @memberof AidCenter
     */
    assetsRequested?: Array<AidCenterAssetsRequested>;
    /**
     * 
     * @type {Array<AidCenterAssetsRequested>}
     * @memberof AidCenter
     */
    assetsFulfilled?: Array<AidCenterAssetsRequested>;
    /**
     * 
     * @type {Array<AidCenterAssetsRequested>}
     * @memberof AidCenter
     */
    assetsOverloaded?: Array<AidCenterAssetsRequested>;
    /**
     * 
     * @type {any}
     * @memberof AidCenter
     */
    feed?: any;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    slug: string;
    /**
     * 
     * @type {Blob}
     * @memberof AidCenter
     */
    photo?: Blob;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    countryCode: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    postalCode: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    city: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    address: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    callRequired?: AidCenter.CallRequiredEnum;
    /**
     * 
     * @type {boolean}
     * @memberof AidCenter
     */
    moneyAccepted?: boolean;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    moneyDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenter
     */
    campaignEndingOn?: string;
}

/**
 * @export
 * @namespace AidCenter
 */
export namespace AidCenter {
    /**
     * @export
     * @enum {string}
     */
    export enum CallRequiredEnum {
        Required = <any> 'required',
        Suggested = <any> 'suggested',
        Denied = <any> 'denied'
    }
}
/**
 * 
 * @export
 * @interface AidCenterAssetsRequested
 */
export interface AidCenterAssetsRequested {
    /**
     * 
     * @type {string}
     * @memberof AidCenterAssetsRequested
     */
    id?: string;
    /**
     * 
     * @type {AidCenterCategory}
     * @memberof AidCenterAssetsRequested
     */
    category: AidCenterCategory;
    /**
     * 
     * @type {string}
     * @memberof AidCenterAssetsRequested
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterAssetsRequested
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterAssetsRequested
     */
    icon?: string;
    /**
     * 
     * @type {boolean}
     * @memberof AidCenterAssetsRequested
     */
    isUrgent: boolean;
    /**
     * 
     * @type {string}
     * @memberof AidCenterAssetsRequested
     */
    status?: AidCenterAssetsRequested.StatusEnum;
}

/**
 * @export
 * @namespace AidCenterAssetsRequested
 */
export namespace AidCenterAssetsRequested {
    /**
     * @export
     * @enum {string}
     */
    export enum StatusEnum {
        Requested = <any> 'requested',
        Fulfilled = <any> 'fulfilled',
        Overloaded = <any> 'overloaded'
    }
}
/**
 * 
 * @export
 * @interface AidCenterCategory
 */
export interface AidCenterCategory {
    /**
     * 
     * @type {string}
     * @memberof AidCenterCategory
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterCategory
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterCategory
     */
    icon?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterCategory
     */
    parent?: string;
}
/**
 * 
 * @export
 * @interface AidCenterOrganization
 */
export interface AidCenterOrganization {
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganization
     */
    id?: string;
    /**
     * 
     * @type {AidCenterOrganizationContact}
     * @memberof AidCenterOrganization
     */
    contact: AidCenterOrganizationContact;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganization
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganization
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganization
     */
    slug: string;
}
/**
 * 
 * @export
 * @interface AidCenterOrganizationContact
 */
export interface AidCenterOrganizationContact {
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganizationContact
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganizationContact
     */
    note?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganizationContact
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganizationContact
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganizationContact
     */
    phone?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganizationContact
     */
    facebook?: string;
    /**
     * 
     * @type {string}
     * @memberof AidCenterOrganizationContact
     */
    url?: string;
}
/**
 * AidCentersApi - fetch parameter creator
 * @export
 */
export const AidCentersApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAidCenter(body?: AidCenter, options: any = {}): FetchArgs {
            const localVarPath = `/aid-centers/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'POST' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AidCenter" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAidCenter(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling destroyAidCenter.');
            }
            const localVarPath = `/aid-centers/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAidCenters(options: any = {}): FetchArgs {
            const localVarPath = `/aid-centers/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateAidCenter(slug: string, body?: AidCenter, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling partialUpdateAidCenter.');
            }
            const localVarPath = `/aid-centers/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AidCenter" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAidCenter(slug: string, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling retrieveAidCenter.');
            }
            const localVarPath = `/aid-centers/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAidCenter(slug: string, body?: AidCenter, options: any = {}): FetchArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling updateAidCenter.');
            }
            const localVarPath = `/aid-centers/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'PUT' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"AidCenter" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.body =  needsSerialization ? JSON.stringify(body || {}) : (body || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AidCentersApi - functional programming interface
 * @export
 */
export const AidCentersApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAidCenter(body?: AidCenter, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AidCenter> {
            const localVarFetchArgs = AidCentersApiFetchParamCreator(configuration).createAidCenter(body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAidCenter(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = AidCentersApiFetchParamCreator(configuration).destroyAidCenter(slug, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAidCenters(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<AidCenter>> {
            const localVarFetchArgs = AidCentersApiFetchParamCreator(configuration).listAidCenters(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateAidCenter(slug: string, body?: AidCenter, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AidCenter> {
            const localVarFetchArgs = AidCentersApiFetchParamCreator(configuration).partialUpdateAidCenter(slug, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAidCenter(slug: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AidCenter> {
            const localVarFetchArgs = AidCentersApiFetchParamCreator(configuration).retrieveAidCenter(slug, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAidCenter(slug: string, body?: AidCenter, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<AidCenter> {
            const localVarFetchArgs = AidCentersApiFetchParamCreator(configuration).updateAidCenter(slug, body, options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * AidCentersApi - factory interface
 * @export
 */
export const AidCentersApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAidCenter(body?: AidCenter, options?: any) {
            return AidCentersApiFp(configuration).createAidCenter(body, options)(fetch, basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        destroyAidCenter(slug: string, options?: any) {
            return AidCentersApiFp(configuration).destroyAidCenter(slug, options)(fetch, basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAidCenters(options?: any) {
            return AidCentersApiFp(configuration).listAidCenters(options)(fetch, basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        partialUpdateAidCenter(slug: string, body?: AidCenter, options?: any) {
            return AidCentersApiFp(configuration).partialUpdateAidCenter(slug, body, options)(fetch, basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        retrieveAidCenter(slug: string, options?: any) {
            return AidCentersApiFp(configuration).retrieveAidCenter(slug, options)(fetch, basePath);
        },
        /**
         * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
         * @param {string} slug 
         * @param {AidCenter} [body] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAidCenter(slug: string, body?: AidCenter, options?: any) {
            return AidCentersApiFp(configuration).updateAidCenter(slug, body, options)(fetch, basePath);
        },
    };
};

/**
 * AidCentersApi - object-oriented interface
 * @export
 * @class AidCentersApi
 * @extends {BaseAPI}
 */
export class AidCentersApi extends BaseAPI {
    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {AidCenter} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AidCentersApi
     */
    public createAidCenter(body?: AidCenter, options?: any) {
        return AidCentersApiFp(this.configuration).createAidCenter(body, options)(this.fetch, this.basePath);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AidCentersApi
     */
    public destroyAidCenter(slug: string, options?: any) {
        return AidCentersApiFp(this.configuration).destroyAidCenter(slug, options)(this.fetch, this.basePath);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AidCentersApi
     */
    public listAidCenters(options?: any) {
        return AidCentersApiFp(this.configuration).listAidCenters(options)(this.fetch, this.basePath);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} slug 
     * @param {AidCenter} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AidCentersApi
     */
    public partialUpdateAidCenter(slug: string, body?: AidCenter, options?: any) {
        return AidCentersApiFp(this.configuration).partialUpdateAidCenter(slug, body, options)(this.fetch, this.basePath);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} slug 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AidCentersApi
     */
    public retrieveAidCenter(slug: string, options?: any) {
        return AidCentersApiFp(this.configuration).retrieveAidCenter(slug, options)(this.fetch, this.basePath);
    }

    /**
     * This viewset automatically provides `list`, `create`, `retrieve`, `update` and `destroy` actions.
     * @param {string} slug 
     * @param {AidCenter} [body] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AidCentersApi
     */
    public updateAidCenter(slug: string, body?: AidCenter, options?: any) {
        return AidCentersApiFp(this.configuration).updateAidCenter(slug, body, options)(this.fetch, this.basePath);
    }

}
/**
 * ApiApi - fetch parameter creator
 * @export
 */
export const ApiApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listprivates(options: any = {}): FetchArgs {
            const localVarPath = `/api/private`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listpublics(options: any = {}): FetchArgs {
            const localVarPath = `/api/public`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listrestricteds(options: any = {}): FetchArgs {
            const localVarPath = `/api/restricted`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listprivates(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ModelObject>> {
            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).listprivates(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listpublics(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ModelObject>> {
            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).listpublics(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listrestricteds(options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<ModelObject>> {
            const localVarFetchArgs = ApiApiFetchParamCreator(configuration).listrestricteds(options);
            return (fetch: FetchAPI = isomorphicFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listprivates(options?: any) {
            return ApiApiFp(configuration).listprivates(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listpublics(options?: any) {
            return ApiApiFp(configuration).listpublics(options)(fetch, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listrestricteds(options?: any) {
            return ApiApiFp(configuration).listrestricteds(options)(fetch, basePath);
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listprivates(options?: any) {
        return ApiApiFp(this.configuration).listprivates(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listpublics(options?: any) {
        return ApiApiFp(this.configuration).listpublics(options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public listrestricteds(options?: any) {
        return ApiApiFp(this.configuration).listrestricteds(options)(this.fetch, this.basePath);
    }

}
